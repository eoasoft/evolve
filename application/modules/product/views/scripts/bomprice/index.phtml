<html>
<head>
<?php echo SYS_HEAD; ?>
<?php
		$editable = 1;
	    $exportable = 1;
	    $oneexportable = 1;

		if(Application_Model_User::checkPermissionByRoleName('BOM管理员')
		  || Application_Model_User::checkPermissionByRoleName('系统管理员')){
			$exportable = 0;
			$editable = 0;
		}
		if(Application_Model_User::checkPermissionByRoleName('BOM查询-批量导出')
		  || Application_Model_User::checkPermissionByRoleName('系统管理员')
		  || Application_Model_User::checkPermissionByRoleName('BOM管理员')){
			$oneexportable = 0;
		}
	?>
<script type="text/javascript" src="<?php echo HOME_PATH?>/public/js/common.js"></script>
<script type="text/javascript" src="<?php echo HOME_PATH ?>/public/js/models.js"></script>
<script type="text/javascript" src="<?php echo HOME_PATH?>/public/js/comboxtree.js"></script>
<script type="text/javascript" src="<?php echo HOME_PATH ?>/public/js/createField.js"></script>
<script type="text/javascript" src="<?php echo HOME_PATH?>/public/js/fileSelect.js"></script>
<script type="text/javascript" src="<?php echo HOME_PATH ?>/public/js/downloadFile.js"></script>
<script type="text/javascript" src="<?php echo HOME_PATH?>/public/js/MaterielCodeSelect.js"></script>
<script type="text/javascript" src="<?php echo HOME_PATH?>/public/js/bom.js"></script>
<script type="text/javascript" src="<?php echo HOME_PATH?>/application/modules/product/views/scripts/bom/js/import.js"></script>
<style type="text/css">
.x-fieldset{border:1px solid #B5B8C8;display:block;}
.x-fieldset-none{border:0;display:block;padding:0;}
.x-grid-cell.myreview
{
    background-color: #9fc;
}
</style>
<script type="text/javascript">
Ext.require([
    'Ext.*'
]);
Ext.define('Ext.ux.CustomTrigger', {
    extend: 'Ext.form.field.Trigger',
    alias: 'widget.customtrigger',

    // override onTriggerClick
    onTriggerClick: function() {
        Ext.Msg.alert('Status', 'You clicked my trigger!');
    }
});

Ext.onReady(function() {
    Ext.QuickTips.init();

    Ext.define('fa', {
        extend: 'Ext.data.Model',
        idProperty: 'id',
        fields: [{ name: "id" },
                 { name: "bom" },
                 { name: "code" },
                 { name: "recordkey" },
                 { name: "ver" },
                 { name: "name" },
                 { name: "description" },
                 { name: "description_head" },
                 { name: "upd_type" },
                 { name: "upd_reason" },
                 { name: "reason_type" },
                 { name: "reason_type_name" },
                 { name: "remark" },
                 { name: "remark_head" },
                 { name: "type" },
                 { name: "project_no_name" },
                 { name: "bom_file" },
                 { name: "file_ver" },
                 { name: "file_desc" },
                 { name: "state" },
                 { name: "creater" },
                 { name: "create_time", type: 'date', dateFormat: 'timestamp' },
                 { name: "bom_upd_time", type: 'date', dateFormat: 'timestamp' },
                 { name: "step_name" },
                 { name: "review_state" },
                 { name: "mytype" },
                 { name: "auto" },
                 { name: "record"},
                { name: "low_cny" },
                { name: "high_cny" },
                { name: "average_cny" },
                { name: "low_usd" },
                { name: "high_usd" },
                { name: "average_usd" },
                { name: "noprice" },
                { name: "update_time", type: 'date', dateFormat: 'timestamp' },
                ]
    });

    Ext.define('codemaster', {
        extend: 'Ext.data.Model',
        idProperty: 'id',
        fields: [{ name: "id" },
                 { name: "code" },
                 { name: 'text'}
                ]
    });

    Ext.define('bom', {
        extend: 'Ext.data.Model',
        idProperty: 'recordkey',
        fields: [{ name: "recordkey" },
            { name: "code" },
            { name: 'ver'}
        ]
    });

    var store = Ext.create('Ext.data.Store', {
        pageSize: 50,
        model: 'fa',
        remoteSort: true,
        proxy: {
            type: 'ajax',
            reader: {
                root: 'topics',
                totalProperty: 'totalCount'
            },
            timeout: 300000,
            url: '<?php echo HOME_PATH; ?>/public/product/bomprice/getlist'
        },
        autoLoad: false
    });
    var bomStore = Ext.create('Ext.data.Store', {
        pageSize: 50,
        model: 'bom',
        remoteSort: true,
        proxy: {
            type: 'ajax',
            reader: {
                root: 'topics',
                totalProperty: 'totalCount'
            },
            timeout: 300000,
            url: '<?php echo HOME_PATH; ?>/public/product/bomprice/getbom'
        },
        autoLoad: false
    });

    function showTotalPrice(value, p, record) {
        if(value) {
            if(record.get('noprice') == 1) {
            	p.css = "myreview";
            	var tip = '有物料未设置价格';
                p.tdAttr = 'data-qtip="' + tip + '"';
            }
            return Number(value).toFixed(4);
        }
        return 0;
    }

    var grid = Ext.create('Ext.grid.Panel', {
        store: store,
        id : 'bomGrid',
        border:0,
        selType: 'checkboxmodel',
        columnLines: true,
        viewConfig: {
            stripeRows: false, // 取消偶数行背景色
            getRowClass: function(record) {
                if ("Obsolete" == record.get('state')) {
                    // 当分类启用状态为false时，设置背景色
                    return 'dark-row';
                }
            }
        },
        tbar: [{
            xtype: 'combobox',
            id: 'search_code',
            width: 120,
            emptyText: 'BOM号',
            editable: true,
            displayField: 'code',
            valueField: 'code',
            hidden: true,
            allowBlank: false,
            triggerAction: 'all',
            forceSelection: true,
            selectOnFocus:true,
            lazyRender: true,
            store: bomStore,
            queryParam: 'q',
            minChars: 2,
            queryMode: 'remote',
            listeners: {
                blur: function(comp, field, e) {
//                    var thisVal = this.value;
//                    if(thisVal) {
//                        thisVal = thisVal.toUpperCase();
//                        this.setValue(thisVal);
//                    }
                },
                keyup: function() {
//                    var thisVal = this.value;
//                    if(thisVal) {
//                        thisVal = thisVal.toUpperCase();
//                        this.setValue(thisVal);
//                    }
                }
            }
        }, {
            xtype: 'textfield',
            id: 'search_fa',
            width: 120,
            emptyText: '上级物料...',
            listeners: {
            	specialKey :function(field,e){
                    if (e.getKey() == Ext.EventObject.ENTER){
                    	store.loadPage(1);
                    }
                }
            }
        }, {
            xtype: 'textfield',
            id: 'search_son',
            width: 120,
            emptyText: '下级物料...',
            listeners: {
            	specialKey :function(field,e){
                    if (e.getKey() == Ext.EventObject.ENTER){
                    	store.loadPage(1);
                    }
                }
            }
        }, {
            xtype: 'textfield',
            id: 'search_key',
            width: 200,
            emptyText: '产品型号/名称/描述/备注...',
            listeners: {
            	specialKey :function(field,e){
                    if (e.getKey() == Ext.EventObject.ENTER){
                    	store.loadPage(1);
                    }
                }
            }
        }, {
            xtype: 'datefield',
            format: 'Y-m-d',
            width: 100,
            id: 'search_archive_date_from',
            emptyText: '归档日期从...'
        }, {
            xtype: 'datefield',
            format: 'Y-m-j',
            width: 100,
            id: 'search_archive_date_to',
            emptyText: '归档日期至...'
        }, {
            xtype: 'combobox',
            id: 'search_state',
            hidden: true,
            emptyText: '状态...',
            width: 100,
//             store: [['EBOM', 'EBOM'], ['MBOM', 'MBOM'], ['EOL', 'EOL'], ['Pre-EOL', 'Pre-EOL'], ['Obsolete', 'Obsolete']]
            store: [['EBOM', '已归档'], ['Obsolete', '旧版作废']]
        }, {
            text: '查询',
            iconCls: 'icon-search',
            handler: function() {
                var search_key = Ext.getCmp('search_key').getValue();
                var search_fa = Ext.getCmp('search_fa').getValue();
                var search_son = Ext.getCmp('search_son').getValue();
                var search_state = Ext.getCmp('search_state').getValue();
                var search_archive_date_from = Ext.getCmp('search_archive_date_from').getValue();
                var search_archive_date_to = Ext.getCmp('search_archive_date_to').getValue();
                store.baseParams = {
                	search_key: search_key,
                    search_fa: search_fa,
                    search_son: search_son,
                    search_state: search_state,
                    search_archive_date_from: search_archive_date_from,
                    search_archive_date_to: search_archive_date_to
                };
                store.loadPage(1);
            }
        },
        {
            text: '导出',
            iconCls: 'icon-export',
            handler: function() {
                var search_key = Ext.getCmp('search_key').getValue();
                var search_fa = Ext.getCmp('search_fa').getValue();
                var search_son = Ext.getCmp('search_son').getValue();
                var search_state = Ext.getCmp('search_state').getValue();
                var search_archive_date_from = Ext.getCmp('search_archive_date_from').getValue();
                var search_archive_date_to = Ext.getCmp('search_archive_date_to').getValue();

                Ext.Msg.wait('加载中，请稍后...', '提示');
                Ext.Ajax.request({
                    url: '<?php echo HOME_PATH; ?>/public/product/bomprice/exportcsv',
                    params: {
	                	search_key: search_key,
	                    search_fa: search_fa,
	                    search_son: search_son,
	                    search_state: search_state,
                        search_archive_date_from: search_archive_date_from,
                        search_archive_date_to: search_archive_date_to,
                        source: 'list'
                    },
                    timeout : 300000,
                    method: 'POST',
                    success: function(response, options) {
                        var url = '<?php echo HOME_PATH; ?>/public/dcc/download/downcsv/path/' + response.responseText;
                        Ext.Msg.hide();
                        window.open(url);
                    }
                });
            }
        },
        ,'|',
        {
            text: '更新价格',
            tooltip: '选择一个或多个BOM，重新读取其价格',
            iconCls: 'icon-refresh',
            handler: function() {
    	        var selection = grid.getView().getSelectionModel().getSelection();
    	        if (selection.length <= 0) {
    	            Ext.MessageBox.alert('请注意', '请您选择要更新的记录！');
    	            return false;
    	        }
    	        
    	        var keys = new Array();
    	        for(var i = 0; i < selection.length; i++) {
    	        	keys.push(selection[i].get('recordkey'));
    	        }
                var search_key = Ext.getCmp('search_key').getValue();
                var search_fa = Ext.getCmp('search_fa').getValue();
                var search_son = Ext.getCmp('search_son').getValue();
                var search_state = Ext.getCmp('search_state').getValue();
                var search_archive_date_from = Ext.getCmp('search_archive_date_from').getValue();
                var search_archive_date_to = Ext.getCmp('search_archive_date_to').getValue();
    	        store.load({
    	        	params: {
	                	search_key: search_key,
	                    search_fa: search_fa,
	                    search_son: search_son,
	                    search_state: search_state,
                        search_archive_date_from: search_archive_date_from,
                        search_archive_date_to: search_archive_date_to,
        	        	recordkeys : keys.join(',')
        	        }
        	    });
                
            }
        },
        {
            text: '读取价格',
            tooltip: '计算新归档的BOM的价格',
            iconCls: 'icon-add',
            handler: function() {
            	Ext.Msg.wait('读取中，请稍后...', '提示');
            	Ext.Ajax.request({
                    url: '<?php echo HOME_PATH; ?>/public/product/bomprice/addprice',
                    method: 'GET',
                    sync: false,
                    timeout : 300000,
                    success: function(response, options) {
                        var data = Ext.JSON.decode(response.responseText);
                        if(data.num) {
                        	Ext.MessageBox.alert('提示', '成功读取到' + data.num + '条新记录');
                            store.reload();
                        } else {
                        	Ext.MessageBox.alert('提示', '没有新记录');
                        }
                    },
                    failure: function(form, action) {
                        Ext.MessageBox.alert('错误', '服务器超时');
                    }
                });
            }
        }
        ],
        columns: [{
            text: 'ID',
            width: 40,
            hidden: true,
            dataIndex: 'id'
        }, {
            text: 'BOM号',
            width: 140,
            dataIndex: 'code',
            renderer: function(value, p, record){
                if(!value) return "";
                var tip = "点击查看BOM";
                p.tdAttr = 'data-qtip="' + tip + '"';
                var recordkey = record.data.recordkey;
                icon = '<img src="<?php echo HOME_PATH; ?>/public/images/icons/view_gray.png"></img>';
                if (value) {
                    icon = '<img src="<?php echo HOME_PATH; ?>/public/images/icons/view.png" onclick="viewPrice(' + recordkey + ')" style="cursor:pointer;"></img>';
                }
                return icon + " " + value;
            }
        },{
            text: '版本',
            width: 50,
            dataIndex: 'ver',
            renderer: function(value, p, record) {
            	if(value && value > 1.0) {
            		var recordkey = record.get('recordkey');
            		var code = record.get('code');
            		var ver = record.get('ver');
            		value = '<a href="#" onclick="viewUpdDetail(' + recordkey + ',\'' + code + '\',\'' + ver + '\')" style="cursor:pointer;">V' + value + '</a>';
            		return value;
            	}
            	if(value) value = "V" + value;
            	return value;
            }
        },{
            text: '状态',
            width: 80,
            dataIndex: 'state'/* ,
            renderer: function(value) {
                if(value == 'EBOM') {
                    return '已归档';
                } else if(value == 'Obsolete') {
                    return '旧版作废';
                }
            } */
        }, {
            text: '最低价',
            columns: [{
                text     : 'CNY',
                width    : 80,
                dataIndex: 'low_cny',
                renderer : showTotalPrice
            }, {
                text     : 'USD',
                width    : 80,
                dataIndex: 'low_usd',
                renderer : showTotalPrice
            }]
        }, {
            text: '最高价',
            columns: [{
                text     : 'CNY',
                width    : 80,
                dataIndex: 'high_cny',
                renderer : showTotalPrice
            }, {
                text     : 'USD',
                width    : 80,
                dataIndex: 'high_usd',
                renderer : showTotalPrice
            }]
        }, {
            text: '平均价',
            columns: [{
                text     : 'CNY',
                width    : 80,
                dataIndex: 'average_cny',
                renderer : showTotalPrice
            }, {
                text     : 'USD',
                width    : 80,
                dataIndex: 'average_usd',
                renderer : showTotalPrice
            }]
        },{
            text: '更新时间',
            width: 160,
            dataIndex: 'update_time',
            renderer : Ext.util.Format.dateRenderer('Y-m-d H:i:s')
        },{
            text: '物料名称',
            width: 180,
            dataIndex: 'name',
            renderer: showTitle
        },{
            text: '物料描述',
            width: 200,
            dataIndex: 'description',
            renderer: showTitle
        },{
            text: '产品型号',
            width: 180,
            sortable: false,
            dataIndex: 'project_no_name',
            renderer: showTitle
        }, {
            text: '归档时间',
            width: 140,
            dataIndex: 'bom_upd_time',
            renderer : Ext.util.Format.dateRenderer('Y-m-d H:i:s')
        }, {
            text: '备注',
            width: 300,
            dataIndex: 'remark',
            renderer: showTitle
        }],
        listeners: {
            itemdblclick: function(grid) {
                //viewAction(grid, 'view');
            }
        },
        bbar: Ext.create('Ext.PagingToolbar', {
            store: store,
            displayInfo: true,
            displayMsg: '显示 {0} - {1} 共 {2}',
            emptyMsg: "没有数据",
            items: [{
                xtype: 'numberfield',
                id: 'page_size_set',
                value: 50,
                width: 150,
                hideTrigger: true,
                labelAlign: 'right',
                fieldLabel: '每页显示',
                listeners: {
                	specialKey :function(field,e){
                        if (e.getKey() == Ext.EventObject.ENTER){
                            var thisStore = this.up('pagingtoolbar').getStore();
                            thisStore.pageSize = Ext.getCmp('page_size_set').getValue();
                            thisStore.loadPage(1);
                        }
                    }
                }
            }]
        })
    });

    store.on("beforeload", function() {
        var search_key = Ext.getCmp('search_key').getValue();
        var search_fa = Ext.getCmp('search_fa').getValue();
        var search_son = Ext.getCmp('search_son').getValue();
        var search_state = Ext.getCmp('search_state').getValue();
        var search_archive_date_from = Ext.getCmp('search_archive_date_from').getValue();
        var search_archive_date_to = Ext.getCmp('search_archive_date_to').getValue();
        Ext.apply(store.proxy.extraParams, {
        	search_key: search_key,
            search_fa: search_fa,
            search_son: search_son,
            search_state: search_state,
            search_archive_date_from: search_archive_date_from,
            search_archive_date_to: search_archive_date_to
        });
    });

    Ext.create('Ext.container.Viewport', {
        layout: 'border',
        border:0,
        rtl: true,
        items: [{
            region: 'center',
            border:0,
            layout: 'fit',
            plain: true,
            items:[grid]
        }]
    });
});
</script>
</head>
<body>
</body>
</html>