<html>
<head>
<?php echo SYS_HEAD; ?>
<script type="text/javascript">
var user_id = <?php echo $this->user_id?>;
var canReplyPlan = <?php echo $this->canReplyPlan;?>;
var canReplySales = <?php echo $this->canReplySales;?>;
Ext.require([
    'Ext.*'
]);

//选项数据模型
Ext.define('Selection', {
    extend: 'Ext.data.Model',
    fields: [{name: 'id', type: 'int'},
             {name: 'currency_id', type: 'int'},
             {name: 'currency'},
             {name: 'code'},
             {name: 'name'},
             {name: 'symbol'},
             {name: 'text'},
             {name: 'rate'},
             {name: 'description'}]
});

//销售类别
var typeListStore = Ext.create('Ext.data.Store', {
    model: 'Selection',
    proxy: {
       type: 'ajax',
       reader: 'json',
       url: homePath+'/public/erp/sale_order/gettype/option/list'
    },
    autoLoad: true
});

var salesListStore = Ext.create('Ext.data.Store', {
    model: 'Selection',
    proxy: {
        type: 'ajax',
        reader: 'json',
        url: homePath+'/public/erp/sale_order/getsales/option/list'
    },
    autoLoad: true
});

var statusStore = Ext.create('Ext.data.Store', {
    model: 'Selection',
    proxy: {
        type: 'ajax',
        reader: 'json',
        url: homePath+'/public/erp/sale_order/getstatus'
    },
    autoLoad: true
});

var currencyStore = Ext.create('Ext.data.Store', {
    model: 'Selection',
    proxy: {
       type: 'ajax',
       reader: 'json',
       url: homePath+'/public/erp/setting_currency/getcurrency/option/list'
    },
    autoLoad: true
});

function setMoney(val, currency){
	var symbol = '';
	
    currencyStore.each(function(rec) {
	    if (rec.get('name') == currency) {
	    	symbol = rec.get('symbol');
	    }
	});
    
    return Ext.util.Format.currency(val, symbol, 2);
}

var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
    clicksToEdit: 1,
    listeners: {
    	beforeedit: function(editor, e){
			if(!canReplyPlan && !canReplySales){
				return false;
			}else if(canReplyPlan && !canReplySales && (e.field == 'sales_remark' || e.field == 'order_status')){
				return false;
			}else if(!canReplyPlan && canReplySales && (e.field == 'code_internal' || e.field == 'delivery_date' || e.field == 'delivery_date_remark')){
				return false;
			}
    	},
    	edit: function(editor, e){
    		if(e.field == 'sales_remark'){
    			if(e.value == e.originalValue || e.value == ''){
            		e.cancel = true;
            	}else{
            		Ext.Msg.wait('处理中，请稍后...', '提示');
    			    Ext.Ajax.request({
    			        url: homePath + '/public/erp/sale_statistics_order/editsalesremark',
    			        params: {id: e.record.get('id'), sales_remark: e.value},
    			        method: 'POST',
    			        success: function(response, options) {
    			        	var data = Ext.JSON.decode(response.responseText);
    						Ext.Msg.hide();
    						
    			            if(!data.success){
    			            	e.record.set(e.field, e.originalValue);
    			            	Ext.MessageBox.alert('错误', data.info);
    			            }else{
    			            	orderStore.loadPage(1);
    			            }
    			        },
    			        failure: function(response){
    			            Ext.MessageBox.alert('错误', '订单状态维护提交失败');
    			        }
    			    });
            	}
    		}else if(e.field == 'order_status'){
    			if(e.value == e.originalValue){
            		e.cancel = true;
            	}else{
            		Ext.Msg.wait('处理中，请稍后...', '提示');
    			    Ext.Ajax.request({
    			        url: homePath + '/public/erp/sale_statistics_order/editorderstatus',
    			        params: {id: e.record.get('order_id'), order_status: e.value},
    			        method: 'POST',
    			        success: function(response, options) {
    			        	var data = Ext.JSON.decode(response.responseText);
    						Ext.Msg.hide();
    						
    			            if(!data.success){
    			            	e.record.set(e.field, e.originalValue);
    			            	Ext.MessageBox.alert('错误', data.info);
    			            }else{
    			            	orderStore.loadPage(1);
    			            }
    			        },
    			        failure: function(response){
    			            Ext.MessageBox.alert('错误', '订单状态维护提交失败');
    			        }
    			    });
            	}
    		}else if(e.field == 'code_internal'){
            	if(e.value == e.originalValue || e.record.get('type') == 'material'){
            		e.cancel = true;
            	}else{
            		Ext.Msg.wait('处理中，请稍后...', '提示');
    			    Ext.Ajax.request({
    			        url: homePath + '/public/erp/sale_statistics_order/editinternalcode',
    			        params: {id: e.record.get('id'), code_internal: e.value},
    			        method: 'POST',
    			        success: function(response, options) {
    			        	var data = Ext.JSON.decode(response.responseText);
    						Ext.Msg.hide();
    						
    			            if(!data.success){
    			            	e.record.set(e.field, e.originalValue);
    			            	Ext.MessageBox.alert('错误', data.info);
    			            }
    			        },
    			        failure: function(response){
    			            Ext.MessageBox.alert('错误', '内部型号提交失败');
    			        }
    			    });
            	}
        	}else if(e.value == null 
					|| (e.field == 'delivery_date_remark' && (e.value == e.originalValue || e.value == '')) 
					|| (e.field == 'delivery_date' && Ext.util.Format.date(e.value, 'Y-m-d') == Ext.util.Format.date(e.originalValue, 'Y-m-d'))){
				e.record.set(e.field, e.originalValue);
				e.cancel = true;
			}else{
				var record = e.record;
			    var date = Ext.util.Format.date(record.get('delivery_date'), 'Y-m-d');
			    var remark = record.get('delivery_date_remark');
				
				Ext.Msg.wait('处理中，请稍后...', '提示');
			    Ext.Ajax.request({
			        url: homePath + '/public/erp/sale_statistics_order/replydeliverydate',
			        params: {id: e.record.get('id'), date: date, remark: remark},
			        method: 'POST',
			        success: function(response, options) {
			        	var data = Ext.JSON.decode(response.responseText);
						Ext.Msg.hide();
						
			            if(!data.success){
			            	e.record.set(e.field, e.originalValue);
			            	Ext.MessageBox.alert('错误', data.info);
			            }else{
			            	orderStore.loadPage(1);
			            }
			        },
			        failure: function(response){
			            Ext.MessageBox.alert('错误', '交期回复提交失败');
			        }
			    });
			}
    	}
    }
});

// 查询结果数据模型
Ext.define('Order', {
    extend: 'Ext.data.Model',
    fields: [{name: "order_id"},
             {name: "order_number"},
             {name: "order_date"},
             {name: "order_state"},
             {name: "order_status"},
             {name: "order_type_name"},
             {name: "order_type_id",type:"int"},
             {name: "order_release_time"},
             {name: "order_currency"},
             {name: "order_total"},
             {name: "order_forein_total"},
             {name: "order_customer"},
             {name: "order_customer_id"},
             {name: "order_customer_code"},
             {name: "order_customer_name"},
             {name: "order_customer_contact"},
             {name: "order_sales_id"},
             {name: "order_sales_name"},
             {name: "order_creater"},
             {name: "order_create_time"},
             {name: "order_updater"},
             {name: "order_update_time"},
             {name: "id"},
             {name: "active"},
             {name: "code"},
             {name: "type"},
             {name: "name"},
             {name: "description"},
             {name: "customer_code"},
             {name: "customer_description"},
             {name: "qty"},
             {name: "qty_send"},
             {name: "send_info"},
             {name: "qty_left"},
             {name: "unit"},
             {name: "price"},
             {name: "price_tax"},
             {name: "total"},
             {name: "request_date"},
             {name: "product_type"},
             {name: "product_series"},
             {name: "code_internal"},
             {name: "delivery_date"},
             {name: "delivery_date_first"},
             {name: "delivery_date_remark"},
             {name: "delivery_reply_log"},
             {name: "remark"},
             {name: "sales_remark"}]
});

// 数据源
var orderStore = Ext.create('Ext.data.ArrayStore', {
    model: 'Order',
    pageSize: 100,
    proxy: {
        type: 'ajax',
        reader: {
            type: 'json',
            root: 'rows',
            totalProperty: 'total'
        },
        url: homePath+'/public/erp/sale_statistics_order/getorder'
    },
    listeners: {
    	beforeload: loadOrder
    }
});

function loadOrder(){
	var key = Ext.getCmp('search_key').getValue();
	var status = Ext.getCmp('search_status').getValue();
	var state = Ext.getCmp('search_state').getValue();
	var type = Ext.JSON.encode(Ext.getCmp('search_type').getValue());
	var sales = Ext.JSON.encode(Ext.getCmp('search_sales').getValue());
	var date_from = Ext.Date.format(Ext.getCmp('search_date_from').getValue(), 'Y-m-d');
    var date_to = Ext.Date.format(Ext.getCmp('search_date_to').getValue(), 'Y-m-d');
    
	Ext.apply(orderStore.proxy.extraParams, {
		key: key,
		state: state,
		status: status,
		sales: sales,
		date_from: date_from,
		date_to: date_to,
		type: type
    });
};

var activeRender = function(value, meta, record, colIndex, store, view) {
	meta.style = 'padding:0;';
	if(value == 1){
	    return '<img src="'+homePath+'/public/images/icons/ok.png"></img>';
	}else{
	    return '<img src="'+homePath+'/public/images/icons/cross.gif"></img>';
	}
};

var longTextRender = function(val, cellmeta, record){
	cellmeta.tdAttr = 'data-qtip="' + val + '"';
	return val;
};

var statusRowEditing = Ext.create('Ext.grid.plugin.CellEditing', {
    clicksToEdit: 1
});

var totalColumn = Ext.create('Ext.grid.column.Column', {
	text: '金额',
    dataIndex: 'total',
    renderer: function(value, meta, rec){
        return setMoney(value, rec.get('order_currency'));
    },
    width: 100
});

var priceColumn = Ext.create('Ext.grid.column.Column', {
	text: '价格',
    dataIndex: 'price',
    renderer: function(value, meta, rec){
        return setMoney(value, rec.get('order_currency'));
    },
    width: 100
});

var statusGrid = Ext.create('Ext.grid.Panel', {
	store: statusStore,
	border: false,
	tbar: [{
        text: '添加',
        iconCls: 'icon-add',
        scope: this,
        handler: function(){
            statusRowEditing.cancelEdit();
            
            var r = Ext.create('Selection', {
                name: ''
            });
            
            statusStore.insert(statusStore.getCount(), r);
            statusRowEditing.startEdit(statusStore.getCount() - 1, 1);
        }
    }, {
        text: '删除',
        iconCls: 'icon-delete',
        scope: this,
        handler: function(){
            var selection = statusGrid.getView().getSelectionModel().getSelection();

            if(selection.length > 0){
                statusStore.remove(selection);
            }else{
                Ext.MessageBox.alert('错误', '没有选择删除对象！');
            }
        }
    }, {
        text: '保存修改',
        iconCls: 'icon-save',
        scope: this,
        handler: function(){
            var updateRecords = statusStore.getUpdatedRecords();
            var insertRecords = statusStore.getNewRecords();
            var deleteRecords = statusStore.getRemovedRecords();

            // 判断是否有修改数据
            if(updateRecords.length + insertRecords.length + deleteRecords.length > 0){
                var changeRows = {
                        updated:    [],
                        inserted:   [],
                        deleted:    []
                }

                // 判断职位信息是否完整
                var valueCheck = true;

                for(var i = 0; i < updateRecords.length; i++){
                    var data = updateRecords[i].data;
                    
                    if(data['name'] == ''){
                        valueCheck = false;
                        break;
                    }
                    
                    changeRows.updated.push(data)
                }
                
                for(var i = 0; i < insertRecords.length; i++){
                    var data = insertRecords[i].data;
                    
                    if(data['name'] == ''){
                        valueCheck = false;
                        break;
                    }
                    
                    changeRows.inserted.push(data)
                }
                
                for(var i = 0; i < deleteRecords.length; i++){
                    changeRows.deleted.push(deleteRecords[i].data)
                }

                // 格式正确则提交修改数据
                if(valueCheck){
                    Ext.MessageBox.confirm('确认', '确定保存修改内容？', function(button, text){
                        if(button == 'yes'){
                            var json = Ext.JSON.encode(changeRows);
                            
                            Ext.Msg.wait('提交中，请稍后...', '提示');
                            Ext.Ajax.request({
                                url: homePath+'/public/erp/sale_order/editstatus',
                                params: {json: json},
                                method: 'POST',
                                success: function(response, options) {
                                    var data = Ext.JSON.decode(response.responseText);

                                    if(data.success){
                                        Ext.MessageBox.alert('提示', data.info);
                                        statusStore.reload();
                                    }else{
                                        Ext.MessageBox.alert('错误', data.info);
                                    }
                                },
                                failure: function(response){
                                    Ext.MessageBox.alert('错误', '保存提交失败');
                                }
                            });
                        }
                    });
                }else{
                    Ext.MessageBox.alert('错误', '名称不能为空，请继续填写！');
                }
            }else{
                Ext.MessageBox.alert('提示', '没有修改任何数据！');
            }
        }
    }, '->', {
        text: '刷新',
        iconCls: 'icon-refresh',
        handler: function(){
            statusStore.reload();
        }
    }],
    plugins: statusRowEditing,
	columns: [{
        xtype: 'rownumberer'
    }, {
        text: 'ID',
        dataIndex: 'id',
        hidden: true,
        flex: 0.5
    }, {
	    text: '名称',
	    dataIndex: 'name',
	    editor: 'textfield',
	    flex: 1
	}, {
		text: '描述',
	    dataIndex: 'description',
	    editor: 'textfield',
	    flex: 2
	}]
});

function showStatusWin(){
	var statusWin = Ext.getCmp('statusWin');

	if(statusWin == undefined){
	    statusWin = Ext.create('Ext.window.Window', {
	    	title: '销售订单状态',
	    	id: 'statusWin',
	    	width: 600,
	    	height: 300,
	    	modal: true,
	    	constrain: true,
	    	layout: 'fit',
	    	maximizable: true,
	    	resizable: true,
	    	closeAction: 'hide',
	    	items: [statusGrid]
	    });
	}

	statusWin.show();

	statusStore.load();
}

// 查询列表
var orderGrid = Ext.define('KitchenSink.view.grid.LockingGrid', {
	extend: 'Ext.grid.Panel',
    xtype: 'locking-grid',
    id: 'orderGrid',
    border: 0,
	store: orderStore,
    columnLines: true,
    plugins: cellEditing,
    tbar: [{
    	xtype: 'combobox',
        id: 'search_state',
        emptyText: '审核状态...',
        displayField: 'text',
        valueField: 'val',
        width: 100,
        store: Ext.create('Ext.data.Store', {
            fields: ['text', 'val'],
            data: [
                {"text": "批准", "val": 2},
                {"text": "审核中", "val": 0},
                {"text": "拒绝", "val": 1}
            ]
        }),
        listeners: {
            change: function(){
            	orderStore.loadPage(1);
            }
        }
    }, {
        xtype: 'combobox',
        id: 'search_status',
        emptyText: '订单状态...',
        displayField: 'name',
        valueField: 'name',
        width: 100,
        store: statusStore,
        queryMode: 'local',
        multiSelect: true
    }, {
        xtype: 'combobox',
        id: 'search_type',
        emptyText: '类别...',
        displayField: 'name',
        valueField: 'id',
        width: 100,
        store: typeListStore,
        queryMode: 'local',
        multiSelect: true
    }, {
        xtype: 'datefield',
        format: 'Y-m-d',
        width: 100,
        id: 'search_date_from',
        emptyText: '订单日期从...'
    }, {
        xtype: 'datefield',
        format: 'Y-m-d',
        width: 100,
        id: 'search_date_to',
        emptyText: '订单日期至...'
    }, {
        xtype: 'combobox',
        id: 'search_sales',
        emptyText: '销售员...',
        displayField: 'name',
        valueField: 'id',
        width: 100,
        store: salesListStore,
        queryMode: 'local',
        multiSelect: true
    }, {
        xtype: 'textfield',
        id: 'search_key',
        emptyText: '关键字...',
        width: 100,
        listeners: {
        	specialKey :function(field,e){
                if (e.getKey() == Ext.EventObject.ENTER){
                	orderStore.loadPage(1);
                }
            }
        }
    }, {
        xtype: 'splitbutton',
        text: '查询',
        iconCls: 'icon-search',
        handler: function(){
        	orderStore.loadPage(1);
        },
        menu: [{
            text: '导出',
            //disabled: true,
            iconCls: 'icon-export',
            handler: function(){
            	var key = Ext.getCmp('search_key').getValue();
            	var state = Ext.getCmp('search_state').getValue();
            	var status = Ext.getCmp('search_status').getValue();
            	var type = Ext.JSON.encode(Ext.getCmp('search_type').getValue());
            	var sales = Ext.JSON.encode(Ext.getCmp('search_sales').getValue());
            	var date_from = Ext.Date.format(Ext.getCmp('search_date_from').getValue(), 'Y-m-d');
                var date_to = Ext.Date.format(Ext.getCmp('search_date_to').getValue(), 'Y-m-d');
                
            	window.open(homePath+'/public/erp/sale_statistics_order/getorder/option/csv/key/' + key + '/state/' + state + '/status/' + status + '/sales/' + sales + '/date_from/' + date_from + '/date_to/' + date_to + '/type/' + type);
            }
        }]
    }, {
        text: '订单状态维护',
        disabled: !canReplySales,
        handler: function(){
            showStatusWin();
        }
    }],
    viewConfig: {
        stripeRows: false,// 取消偶数行背景色
        getRowClass: function(record) {
        	if(record.get('active') == 0 || record.get('order_state') == '拒绝'){
                return 'light-red-row';
            }else if(record.get('qty_left' == 0)){
                return 'gray-row';
            }
        }
    },
    columns: [{
        xtype: 'rownumberer'
    }, {
        text: '启用',
        //locked: true,
        dataIndex: 'active',
        align: 'center',
        renderer: activeRender,
        width: 50
    }, {
        text: '订单号',
        //locked: true,
        dataIndex: 'order_number',
        align: 'center',
        width: 100
    }, {
    	text: '审核状态',
        //locked: true,
        align: 'center',
        dataIndex: 'order_state',
        width: 80
    }, {
    	text: '订单状态',
        align: 'center',
        dataIndex: 'order_status',
        renderer: function(val, meta, record){
        	meta.style = 'background-color: #dedede;color: #0000FF;';
            
        	return val;
        },
        editor: new Ext.form.field.ComboBox({
            displayField: 'name',
            valueField: 'name',
            triggerAction: 'all',
            lazyRender: true,
            store: statusStore,
            queryMode: 'local'
        }),
        width: 80
    }, {
        text: '类别',
        dataIndex: 'type',
        align: 'center',
        renderer: function(val, cellmeta, record, rowIndex){
    		if(val == 'catalog'){
    			return '产品';
    		}else{
    			return '物料';
    		}
    	},
        width: 60
    }, {
        text: '产品型号',
        dataIndex: 'code',
        width: 160
    }, {
        text: '内部型号',
        dataIndex: 'code_internal',
        renderer: function(val, meta, record){
            if(record.get('type') == 'catalog'){
                meta.style = 'background-color: #FFECEC;color: #0000FF;';
            }
            
        	return val;
        },
        editor: 'textfield',
        width: 160
    }, {
        text: '销售员',
        dataIndex: 'order_sales_name',
        align: 'center',
        width: 80
    }, {
        text: '订单类别',
        dataIndex: 'order_type_name',
        align: 'center',
        width: 80
    }, {
        text: '客户代码',
        dataIndex: 'order_customer_code',
        align: 'center',
        width: 80
    }, {
        text: '客户名称',
        dataIndex: 'order_customer_name',
        renderer: function(val, cellmeta, record, rowIndex){
        	cellmeta.tdAttr = 'data-qtip="' + val + '"';
        	return val;
    	},
        width: 120
    }, {
        text: '名称',
        dataIndex: 'name',
        width: 120
    }, {
        text: '描述',
        dataIndex: 'description',
        renderer: longTextRender,
        width: 200
    }, {
        text: '客户产品型号',
        dataIndex: 'customer_code',
        width: 120
    }, {
        text: '客户产品描述',
        dataIndex: 'customer_description',
        width: 120
    }, {
        text: '产品类别',
        dataIndex: 'product_type',
        width: 120
    }, {
        text: '产品系列',
        dataIndex: 'product_series',
        width: 120
    }, {
        text: '订单数量',
        //locked: true,
        dataIndex: 'qty',
        align: 'center',
        renderer: function(val, meta, record){
        	meta.style = 'background-color: #DFFFDF';
        	
        	return val;
        },
        width: 80
    }, {
        text: '交货数量',
        dataIndex: 'qty_send',
        align: 'center',
        renderer: function(val, meta, record){
        	meta.style = 'background-color: #FFFFDF';
        	
        	return val;
        },
        width: 80
    }, {
        text: '交货信息',
        dataIndex: 'send_info',
        renderer: function(val, meta, record){
        	meta.tdAttr = 'data-qtip="' + val.replace(/,/g, '<br>') + '"';
        	meta.style = 'background-color: #FFFFDF;overflow:auto;padding: 2px 2px;text-overflow: ellipsis;white-space: nowrap;white-space:normal;line-height:16px;';
        	
        	return val.replace(/,/g, '<br>');
        },
        width: 300
    }, {
        text: '未交货数量',
        dataIndex: 'qty_left',
        align: 'center',
        renderer: function(val, meta, record){
        	meta.style = 'background-color: #F0F0F0';
        	
        	return val;
        },
        width: 80
    }, {
        text: '需求交期',
        dataIndex: 'request_date',
        align: 'center',
        renderer: function(val, meta, record){
        	meta.style = 'color: #006000; font-weight: bold';
        	
        	return Ext.util.Format.date(val, 'Y-m-d');
        },
        width: 100
    }, {
        text: '预计交期(首次)',
        dataIndex: 'delivery_date_first',
        renderer: function(val, meta, record){
        	return Ext.util.Format.date(val, 'Y-m-d');
        },
        width: 100
    }, {
        text: '预计交期(最终)',
        dataIndex: 'delivery_date',
        align: 'center',
        renderer: function(val, meta, record){
        	meta.style = 'background-color: #FFECEC;color: #0000FF; font-weight: bold';
        	
        	return Ext.util.Format.date(val, 'Y-m-d');
        },
        editor: {
            xtype: 'datefield',
            //editable: false,
            format: 'Y-m-d'
        },
        width: 100
    }, {
        text: '交期备注',
        dataIndex: 'delivery_date_remark',
        renderer: function(val, meta, record){
        	meta.style = 'background-color: #FFECEC;color: #0000FF;';
        	
        	return val;
        },
        editor: 'textfield',
        width: 180
    }, {
        text: '交期回复日志',
        dataIndex: 'delivery_reply_log',
        renderer: function(val, meta, record){
        	meta.style = 'background-color: #FFECEC;color: #0000FF;overflow:auto;padding: 2px 2px;text-overflow: ellipsis;white-space: nowrap;white-space:normal;line-height:16px;';
        	
        	return val.replace(/,/g, '<br>');//.replace(/[/g, '<b>').replace(/]/g, '</b>')
        },
        width: 300
    }, {
        text: '销售备注',
        dataIndex: 'sales_remark',
        renderer: function(val, meta, record){
        	meta.style = 'background-color: #dedede;color: #0000FF;';
        	
        	return val;
        },
        editor: 'textfield',
        width: 180
    }, {
        text: '客户收件人地址简码',
        dataIndex: 'order_customer_contact',
        width: 140
    }, {
        text: '备注',
        dataIndex: 'remark',
        renderer: longTextRender,
        width: 100
    }, {
        text: '下单时间',
        dataIndex: 'order_create_time',
        align: 'center',
        width: 140
    }, {
        text: '批准时间',
        dataIndex: 'order_release_time',
        align: 'center',
        width: 140
    }],
    bbar: Ext.create('Ext.PagingToolbar', {
    	border: 0,
        store: orderStore,
        displayInfo: true,
        displayMsg: '显示 {0} - {1} 共 {2}',
        emptyMsg: "没有数据"
    })
});

Ext.onReady(function() {
    Ext.QuickTips.init();
    
    Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));
    
    Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
            region: 'center',
            border: 0,
            layout: 'fit',
            items: [orderGrid]
        }]
    });

    if(canReplySales){
    	Ext.getCmp('orderGrid').getView().headerCt.insert(5, priceColumn);
    	Ext.getCmp('orderGrid').getView().headerCt.insert(6, totalColumn);
    }
});
</script>
</head>
<body>
</body>
</html>